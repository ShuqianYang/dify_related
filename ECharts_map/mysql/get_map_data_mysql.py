# get_map_data_mysql.py
import pymysql
from db_config import get_db_config, get_table_name

def get_map_data(animal_type=None, start_date=None, end_date=None):
    """
    Ëé∑ÂèñÂú∞ÂõæÊï∞ÊçÆ - Âä®Áâ©ÂàÜÂ∏ÉÁõëÊµãÁÇπÔºàÂü∫‰∫éÁªèÁ∫¨Â∫¶ÂùêÊ†áÔºâ
    
    Args:
        animal_type (str, optional): Âä®Áâ©ÁßçÁ±ªÁ≠õÈÄâ
        start_date (str, optional): ÂºÄÂßãÊó•Êúü (YYYY-MM-DD)
        end_date (str, optional): ÁªìÊùüÊó•Êúü (YYYY-MM-DD)
    
    Returns:
        list: ÂåÖÂê´Âú∞ÁêÜ‰ΩçÁΩÆÂíåÂä®Áâ©Êï∞ÈáèÁöÑÊï∞ÊçÆÂàóË°®
    """
    try:
        # ËøûÊé•Êï∞ÊçÆÂ∫ì
        connection = pymysql.connect(**get_db_config())
        cursor = connection.cursor()
        
        # ÊûÑÂª∫SQLÊü•ËØ¢ - Áõ¥Êé•‰ΩøÁî®ÁªèÁ∫¨Â∫¶ÂùêÊ†á
        table_name = get_table_name()
        base_sql = f"""
        SELECT 
            longitude,
            latitude,
            location,
            SUM(count) as count,
            GROUP_CONCAT(DISTINCT animal) as animal_types
        FROM {table_name}
        WHERE longitude IS NOT NULL 
        AND latitude IS NOT NULL 
        AND longitude != '' 
        AND latitude != ''
        """
        
        params = []
        
        # Ê∑ªÂä†Á≠õÈÄâÊù°‰ª∂
        if animal_type and animal_type != 'all':
            base_sql += " AND animal = %s"
            params.append(animal_type)
            
        # ‰ΩøÁî®dateÂ≠óÊÆµËøõË°åÊó•ÊúüÁ≠õÈÄâ
        # Ê≥®ÊÑèÔºöÊï∞ÊçÆÂ∫ì‰∏≠dateÂ≠óÊÆµÊ†ºÂºè‰∏∫YYYYMMDDÔºåÂâçÁ´Ø‰º†ÈÄíÁöÑÊòØYYYY-MM-DD
        if start_date:
            # Â∞ÜYYYY-MM-DDÊ†ºÂºèËΩ¨Êç¢‰∏∫YYYYMMDDÊ†ºÂºè
            start_date_formatted = start_date.replace('-', '')
            base_sql += " AND date >= %s"
            params.append(start_date_formatted)
            
        if end_date:
            # Â∞ÜYYYY-MM-DDÊ†ºÂºèËΩ¨Êç¢‰∏∫YYYYMMDDÊ†ºÂºè
            end_date_formatted = end_date.replace('-', '')
            base_sql += " AND date <= %s"
            params.append(end_date_formatted)
        
        base_sql += " GROUP BY longitude, latitude, location ORDER BY count DESC"
        
        # ÂèØÈÄâÔºöËé∑ÂèñÊï∞ÊçÆÂ∫ì‰∏≠ÁöÑÊó•ÊúüËåÉÂõ¥ÔºàÁî®‰∫éË∞ÉËØïÔºâ
        # date_range_sql = f"SELECT MIN(date) as min_date, MAX(date) as max_date, COUNT(*) as total FROM {table_name}"
        # cursor.execute(date_range_sql)
        # date_range = cursor.fetchone()
        # print(f"üìÖ Êï∞ÊçÆÂ∫ìÊó•ÊúüËåÉÂõ¥: {date_range[0]} Âà∞ {date_range[1]}, ÊÄªËÆ∞ÂΩïÊï∞: {date_range[2]}")
        
        # ÊâßË°åÊü•ËØ¢
        cursor.execute(base_sql, params)
        results = cursor.fetchall()
        
        # Â§ÑÁêÜÁªìÊûú
        map_data = []
        for row in results:
            longitude, latitude, location, count, animal_types = row
            try:
                # Â§ÑÁêÜÂ∏¶ÊúâÊñπÂêëÂâçÁºÄÁöÑÁªèÁ∫¨Â∫¶Êï∞ÊçÆ
                # ÁªèÂ∫¶: E/WÂâçÁºÄÔºåÁ∫¨Â∫¶: N/SÂâçÁºÄ
                lng_str = str(longitude).strip()
                lat_str = str(latitude).strip()
                
                # Ëß£ÊûêÁªèÂ∫¶
                if lng_str.startswith('E'):
                    lng = float(lng_str[1:])  # ‰∏úÁªè‰∏∫Ê≠£
                elif lng_str.startswith('W'):
                    lng = -float(lng_str[1:])  # Ë•øÁªè‰∏∫Ë¥ü
                else:
                    lng = float(lng_str)  # Áõ¥Êé•Êï∞Â≠ó
                
                # Ëß£ÊûêÁ∫¨Â∫¶
                if lat_str.startswith('N'):
                    lat = float(lat_str[1:])  # ÂåóÁ∫¨‰∏∫Ê≠£
                elif lat_str.startswith('S'):
                    lat = -float(lat_str[1:])  # ÂçóÁ∫¨‰∏∫Ë¥ü
                else:
                    lat = float(lat_str)  # Áõ¥Êé•Êï∞Â≠ó
                
                map_data.append({
                    'name': location or f"‰ΩçÁΩÆ({lng:.4f},{lat:.4f})",
                    'value': count,
                    'animal_types': animal_types.split(',') if animal_types else [],
                    'coord': [lng, lat]  # Áõ¥Êé•‰ΩøÁî®Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÁªèÁ∫¨Â∫¶
                })
            except (ValueError, TypeError) as e:
                # Ë∑≥ËøáÊó†ÊïàÁöÑÂùêÊ†áÊï∞ÊçÆ
                print(f"ÂùêÊ†áËΩ¨Êç¢Â§±Ë¥•: {e}, ÂéüÂßãÊï∞ÊçÆ: ÁªèÂ∫¶='{longitude}', Á∫¨Â∫¶='{latitude}'")
                continue
        
        cursor.close()
        connection.close()
        
        return map_data
        
    except Exception as e:
        print(f"Ëé∑ÂèñÂú∞ÂõæÊï∞ÊçÆÊó∂Âá∫Èîô: {e}")
        return []



def get_location_detail(longitude=None, latitude=None, location=None, start_date=None, end_date=None, limit=100):
    """
    Ëé∑ÂèñÊåáÂÆöÂùêÊ†áÊàñÂú∞ÁÇπÁöÑËØ¶ÁªÜ‰ø°ÊÅØÔºåÂåÖÊã¨ÊúÄÊñ∞ÂõæÁâá
    
    Args:
        longitude (float, optional): ÁªèÂ∫¶ÂùêÊ†á
        latitude (float, optional): Á∫¨Â∫¶ÂùêÊ†á  
        location (str, optional): Âú∞ÁÇπÂêçÁß∞ÔºàÂ§áÁî®Ôºâ
        start_date (str, optional): ÂºÄÂßãÊó•Êúü (YYYY-MM-DD)
        end_date (str, optional): ÁªìÊùüÊó•Êúü (YYYY-MM-DD)
        limit (int): ËøîÂõûËÆ∞ÂΩïÊï∞ÈáèÈôêÂà∂
    
    Returns:
        list: ÂåÖÂê´ÂõæÁâáÂíåËØ¶ÁªÜ‰ø°ÊÅØÁöÑÊï∞ÊçÆÂàóË°®
    """
    try:
        # ËøûÊé•Êï∞ÊçÆÂ∫ì
        connection = pymysql.connect(**get_db_config())
        cursor = connection.cursor()
        
        table_name = get_table_name()
        
        # Ë∞ÉËØïÔºöÊü•ÁúãÊï∞ÊçÆÂ∫ì‰∏≠ÁöÑÁªèÁ∫¨Â∫¶Ê†ºÂºè
        debug_sql = f"SELECT longitude, latitude, location FROM {table_name} LIMIT 5"
        cursor.execute(debug_sql)
        debug_results = cursor.fetchall()
        print(f"üîç Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÁªèÁ∫¨Â∫¶Ê†ºÂºèÁ§∫‰æã: {debug_results}")
        
        # ÊûÑÂª∫Âü∫Á°ÄSQLÊü•ËØ¢ - Ëé∑ÂèñÊúÄÊñ∞ÁöÑÂõæÁâá/ËßÜÈ¢ëÂíåÊèèËø∞‰ø°ÊÅØ
        base_sql = f"""
        SELECT 
            animal,
            caption,
            time,
            location,
            longitude,
            latitude,
            image_id,
            count,
            date,
            path,
            type
        FROM {table_name}
        WHERE 1=1
        """
        
        params = []
        
        # Ê∑ªÂä†‰ΩçÁΩÆÁ≠õÈÄâÊù°‰ª∂
        if longitude is not None and latitude is not None:
            # ‰ΩøÁî®Ê®°Á≥äÂåπÈÖçÔºåÂÖÅËÆ∏Â∞èÊï∞ÁÇπÂêé2‰ΩçÁöÑËØØÂ∑Æ
            base_sql += " AND ABS(CAST(REPLACE(REPLACE(longitude, 'E', ''), 'W', '') AS DECIMAL(10,6)) - %s) < 0.01"
            base_sql += " AND ABS(CAST(REPLACE(REPLACE(latitude, 'N', ''), 'S', '') AS DECIMAL(10,6)) - %s) < 0.01"
            params.extend([longitude, latitude])
        elif location:
            base_sql += " AND location LIKE %s"
            params.append(f"%{location}%")
        else:
            return []
        
        # Ê∑ªÂä†Êó∂Èó¥ÊÆµÁ≠õÈÄâÊù°‰ª∂
        if start_date:
            # Â∞ÜYYYY-MM-DDÊ†ºÂºèËΩ¨Êç¢‰∏∫YYYYMMDDÊ†ºÂºè
            start_date_formatted = start_date.replace('-', '')
            base_sql += " AND date >= %s"
            params.append(start_date_formatted)
            
        if end_date:
            # Â∞ÜYYYY-MM-DDÊ†ºÂºèËΩ¨Êç¢‰∏∫YYYYMMDDÊ†ºÂºè
            end_date_formatted = end_date.replace('-', '')
            base_sql += " AND date <= %s"
            params.append(end_date_formatted)
        
        # ÊåâÊó•ÊúüÂíåÊó∂Èó¥ÊéíÂ∫èÔºåËé∑ÂèñÊúÄÊñ∞ÁöÑËÆ∞ÂΩï
        base_sql += " ORDER BY date DESC, time DESC LIMIT %s"
        params.append(limit)
        
        cursor.execute(base_sql, params)
        
        results = cursor.fetchall()
        
        # Â§ÑÁêÜÁªìÊûú - ÊåâÂä®Áâ©Á±ªÂûãÂàÜÁªÑÔºåËé∑ÂèñÊØèÁßçÂä®Áâ©ÁöÑÊúÄÊñ∞ÂõæÁâáÂíåÊèèËø∞
        animal_latest_data = {} # ‰∏ÄÊù°ËÆ∞ÂΩïÁî®Â≠óÂÖ∏‰øùÂ≠ò
        detail_data = []        # ÊâÄÊúâËÆ∞ÂΩïÁî®ÂàóË°®‰øùÂ≠ò
        
        for row in results:
            animal, caption, time, location, lng, lat, image_id, count, date, path, media_type = row
            
            # ‰∏∫ÊØèÁßçÂä®Áâ©‰øùÂ≠òÊúÄÊñ∞ÁöÑÂ™í‰ΩìÊñá‰ª∂ÂíåÊèèËø∞‰ø°ÊÅØÔºàÂõ†‰∏∫ËøîÂõûÁöÑresultÊòØÊåâÁÖßÊó∂Èó¥Êó•ÊúüÈôçÂ∫èÊéíÂàóÁöÑÔºåÊâÄ‰ª•Á¨¨‰∏Ä‰∏™ËÆ∞ÂΩïÂ∞±ÊòØÊúÄÊñ∞ÁöÑÔºâ
            if animal not in animal_latest_data:
                animal_latest_data[animal] = {
                    'latest_media': path if path else None,
                    'latest_media_type': media_type if media_type else 'image',  # ÈªòËÆ§‰∏∫ÂõæÁâáÁ±ªÂûã
                    'latest_caption': caption,
                    'latest_time': str(time),
                    'latest_date': str(date)
                }
            
            detail_data.append({
                'animal_type': animal,
                'caption': caption,
                'time': str(time),
                'date': str(date),
                'location': location,
                'longitude': lng,
                'latitude': lat,
                'coordinates': f"({lng}, {lat})" if lng and lat else None,
                'media_path': path if path else None,
                'media_type': media_type if media_type else 'image',  # ÈªòËÆ§‰∏∫ÂõæÁâáÁ±ªÂûã
                'count': count
            })
        
        cursor.close()
        connection.close()
        
        # Â∞ÜÊúÄÊñ∞ÂõæÁâá‰ø°ÊÅØÊ∑ªÂä†Âà∞ËøîÂõûÊï∞ÊçÆ‰∏≠
        return {
            'details': detail_data,
            'latest_by_animal': animal_latest_data
        }
        
    except Exception as e:
        print(f"Ëé∑ÂèñÂú∞ÁÇπËØ¶ÊÉÖÊó∂Âá∫Èîô: {e}")
        return []


def main():
    """
    ‰∏ªÂáΩÊï∞ - Áî®‰∫éË∞ÉËØïÂíåÊµãËØïget_map_data.py‰∏≠ÁöÑÂáΩÊï∞
    
    ÊµãËØïÂÜÖÂÆπÔºö
    1. ÊµãËØïget_map_dataÂáΩÊï∞ - Ëé∑ÂèñÂú∞ÂõæÊï∞ÊçÆ
    2. ÊµãËØïget_location_detailÂáΩÊï∞ - Ëé∑Âèñ‰ΩçÁΩÆËØ¶ÊÉÖ
    3. È™åËØÅÊï∞ÊçÆÊ†ºÂºèÂíåÂÜÖÂÆπÁöÑÊ≠£Á°ÆÊÄß
    4. ËæìÂá∫Ë∞ÉËØï‰ø°ÊÅØÂíåÁªüËÆ°ÁªìÊûú
    """
    print("üó∫Ô∏è ÂºÄÂßãË∞ÉËØï get_map_data.py Ê®°Âùó")
    print("=" * 60)
    
    # # Á¨¨‰∏ÄÈÉ®ÂàÜÔºöÊµãËØïget_map_dataÂáΩÊï∞
    # print("\n=== üìç ÊµãËØï get_map_data ÂáΩÊï∞ ===")
    
    # try:
    #     # 1. ÊµãËØïËé∑ÂèñÊâÄÊúâÂú∞ÂõæÊï∞ÊçÆ
    #     print("1Ô∏è‚É£ Ëé∑ÂèñÊâÄÊúâÂú∞ÂõæÊï∞ÊçÆ...")
    #     all_map_data = get_map_data()
    #     print(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(all_map_data)} ‰∏™ÁõëÊµãÁÇπ")
        
    #     if all_map_data:
    #         # ÊòæÁ§∫Ââç3‰∏™Êï∞ÊçÆÁÇπÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
    #         print("\nüìä Ââç3‰∏™ÁõëÊµãÁÇπËØ¶ÊÉÖ:")
    #         for i, point in enumerate(all_map_data[:3]):
    #             print(f"  {i+1}. {point['name']}")
    #             print(f"     ÂùêÊ†á: {point['coord']}")
    #             print(f"     ÁõëÊµãÊï∞Èáè: {point['value']}")
    #             print(f"     Âä®Áâ©Á±ªÂûã: {point['animal_types']}")
    #             print()
        
    #     # 2. ÊµãËØïÊåâÂä®Áâ©Á±ªÂûãÁ≠õÈÄâ
    #     print("2Ô∏è‚É£ ÊµãËØïÂä®Áâ©Á±ªÂûãÁ≠õÈÄâ...")
    #     if all_map_data:
    #         # Ëé∑ÂèñÁ¨¨‰∏Ä‰∏™Âä®Áâ©Á±ªÂûãËøõË°åÊµãËØï
    #         first_animal_types = all_map_data[0]['animal_types']
    #         if first_animal_types:
    #             test_animal = first_animal_types[0]
    #             filtered_data = get_map_data(animal_type=test_animal)
    #             print(f"‚úÖ Á≠õÈÄâÂä®Áâ©Á±ªÂûã '{test_animal}': {len(filtered_data)} ‰∏™ÁõëÊµãÁÇπ")
    #         else:
    #             print("‚ö†Ô∏è Êú™ÊâæÂà∞ÂèØÁî®ÁöÑÂä®Áâ©Á±ªÂûãËøõË°åÊµãËØï")
        
    #     # 3. ÊµãËØïÊó•ÊúüÁ≠õÈÄâ
    #     print("3Ô∏è‚É£ ÊµãËØïÊó•ÊúüÁ≠õÈÄâ...")
    #     date_filtered_data = get_map_data(start_date='2024-01-01', end_date='2024-12-31')
    #     print(f"‚úÖ 2024Âπ¥Êï∞ÊçÆ: {len(date_filtered_data)} ‰∏™ÁõëÊµãÁÇπ")
        
    # except Exception as e:
    #     print(f"‚ùå get_map_data ÊµãËØïÂ§±Ë¥•: {e}")
    #     import traceback
    #     traceback.print_exc()
    
    # Á¨¨‰∫åÈÉ®ÂàÜÔºöÊµãËØïget_location_detailÂáΩÊï∞
    print("\n=== üîç ÊµãËØï get_location_detail ÂáΩÊï∞ ===")
    
    try:
        print("1Ô∏è‚É£ Ëé∑ÂèñÊâÄÊúâÂú∞ÂõæÊï∞ÊçÆ...")
        all_map_data = get_map_data()
        print(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(all_map_data)} ‰∏™ÁõëÊµãÁÇπ")
        
        if all_map_data:
            # ‰ΩøÁî®Á¨¨‰∫å‰∏™ÁõëÊµãÁÇπÁöÑÂùêÊ†áËøõË°åÊµãËØï
            test_point = all_map_data[1]  # ÊàêÈÉΩ
            test_lng, test_lat = test_point['coord']
            test_location = test_point['name']
            
            print(f"4Ô∏è‚É£ ÊµãËØï‰ΩçÁΩÆËØ¶ÊÉÖËé∑Âèñ...")
            print(f"   ÊµãËØïÂùêÊ†á: ({test_lng}, {test_lat})")
            print(f"   ÊµãËØïÂú∞ÁÇπ: {test_location}")
            
            # ÊåâÂùêÊ†áÊü•ËØ¢
            detail_data = get_location_detail(longitude=test_lng, latitude=test_lat)
            
            if detail_data and isinstance(detail_data, dict):
                details = detail_data.get('details', [])
                latest_by_animal = detail_data.get('latest_by_animal', {})
            # 1. ‰ªé detail_data Â≠óÂÖ∏‰∏≠Êü•ÊâæÈîÆÂêç‰∏∫ 'details' ÁöÑÂÄº
            # 2. Â¶ÇÊûúÊâæÂà∞‰∫ÜÔºåËøîÂõûÂØπÂ∫îÁöÑÂÄº
            # 3. Â¶ÇÊûúÊ≤°ÊâæÂà∞ÔºåËøîÂõûÈªòËÆ§ÂÄº [] ÔºàÁ©∫ÂàóË°®Ôºâ
                
                print(f"‚úÖ Ëé∑ÂèñËØ¶ÊÉÖËÆ∞ÂΩï: {len(details)} Êù°")
                print(f"‚úÖ Âä®Áâ©Á±ªÂûãÊï∞Èáè: {len(latest_by_animal)} Áßç")
                
                # ÊòæÁ§∫ËØ¶ÊÉÖÊï∞ÊçÆÁªüËÆ°
                if details:  # Â≠óÂÖ∏
                    print("\nüìã ËØ¶ÊÉÖÊï∞ÊçÆÁªüËÆ°:")
                    animal_counts = {}
                    for detail in details:
                        animal = detail.get('animal_type')
                        count = detail.get('count', 1)
                        if animal:
                            animal_counts[animal] = animal_counts.get(animal, 0) + count
                    
                    for animal, count in animal_counts.items():
                        print(f"   {animal}: {count} Âè™")
                    
                    total_count = sum(animal_counts.values())
                    print(f"   ÊÄªËÆ°: {total_count} Âè™")
                
                # ÊòæÁ§∫ÊúÄÊñ∞Â™í‰Ωì‰ø°ÊÅØ
                if latest_by_animal:
                    print("\nüñºÔ∏è ÊúÄÊñ∞Â™í‰Ωì‰ø°ÊÅØ:")
                    for animal, info in latest_by_animal.items():
                        print(f"   {animal}:")
                        print(f"     ÊúÄÊñ∞Êó•Êúü: {info.get('latest_date')}")
                        print(f"     ÊúÄÊñ∞Êó∂Èó¥: {info.get('latest_time')}")
                        print(f"     Â™í‰ΩìÁ±ªÂûã: {info.get('latest_media_type', 'Êú™Áü•')}")
                        print(f"     Â™í‰ΩìË∑ØÂæÑ: {info.get('latest_media', 'Êó†')}")
                        print(f"     ÊèèËø∞: {info.get('latest_caption', 'Êó†')[:50]}...")
            else:
                print("‚ö†Ô∏è Êú™Ëé∑ÂèñÂà∞ËØ¶ÊÉÖÊï∞ÊçÆ")
            
            # 5. ÊµãËØïÊåâÂú∞ÁÇπÂêçÁß∞Êü•ËØ¢
            print(f"\n5Ô∏è‚É£ ÊµãËØïÊåâÂú∞ÁÇπÂêçÁß∞Êü•ËØ¢...")
            location_data = get_location_detail(location=test_location)
            if location_data and isinstance(location_data, dict):
                location_details = location_data.get('details', [])
                print(f"‚úÖ ÊåâÂú∞ÁÇπÂêçÁß∞Êü•ËØ¢: {len(location_details)} Êù°ËÆ∞ÂΩï")
            else:
                print("‚ö†Ô∏è ÊåâÂú∞ÁÇπÂêçÁß∞Êü•ËØ¢Êó†ÁªìÊûú")
                
        else:
            print("‚ùå Êó†Ê≥ïËøõË°åËØ¶ÊÉÖÊµãËØïÔºåÂõ†‰∏∫Ê≤°ÊúâÂèØÁî®ÁöÑÂú∞ÂõæÊï∞ÊçÆ")
            
    except Exception as e:
        print(f"‚ùå get_location_detail ÊµãËØïÂ§±Ë¥•: {e}")
        import traceback
        traceback.print_exc()
    
    # Á¨¨‰∏âÈÉ®ÂàÜÔºöÊï∞ÊçÆ‰∏ÄËá¥ÊÄßÈ™åËØÅ
    print("\n=== ‚öñÔ∏è Êï∞ÊçÆ‰∏ÄËá¥ÊÄßÈ™åËØÅ ===")
    
    try:
        if all_map_data:
            print("6Ô∏è‚É£ È™åËØÅÂú∞ÂõæÊï∞ÊçÆ‰∏éËØ¶ÊÉÖÊï∞ÊçÆÁöÑ‰∏ÄËá¥ÊÄß...")
            
            # ÈöèÊú∫ÈÄâÊã©Âá†‰∏™ÁÇπËøõË°åÈ™åËØÅ
            test_points = all_map_data[:min(3, len(all_map_data))]
            consistent_count = 0
            
            for i, point in enumerate(test_points):
                lng, lat = point['coord']
                map_value = point['value']
                location_name = point['name']
                
                print(f"\n   È™åËØÅÁÇπ {i+1}: {location_name}")
                print(f"   Âú∞ÂõæÊòæÁ§∫Êï∞Èáè: {map_value}")
                
                detail_data = get_location_detail(longitude=lng, latitude=lat)
                if detail_data and isinstance(detail_data, dict):
                    details = detail_data.get('details', [])
                    detail_total = sum(detail.get('count', 1) for detail in details)
                    
                    print(f"   ËØ¶ÊÉÖÁªüËÆ°Êï∞Èáè: {detail_total}")
                    
                    if map_value == detail_total:
                        print(f"   ‚úÖ Êï∞ÊçÆ‰∏ÄËá¥")
                        consistent_count += 1
                    else:
                        print(f"   ‚ùå Êï∞ÊçÆ‰∏ç‰∏ÄËá¥ (Â∑ÆÂÄº: {abs(map_value - detail_total)})")
                else:
                    print(f"   ‚ö†Ô∏è Êó†Ê≥ïËé∑ÂèñËØ¶ÊÉÖÊï∞ÊçÆ")
            
            print(f"\nüìä ‰∏ÄËá¥ÊÄßÈ™åËØÅÁªìÊûú: {consistent_count}/{len(test_points)} ‰∏™ÁÇπÊï∞ÊçÆ‰∏ÄËá¥")
            print(f"üìà ‰∏ÄËá¥ÊÄßÊØî‰æã: {consistent_count/len(test_points)*100:.1f}%")
        
    except Exception as e:
        print(f"‚ùå Êï∞ÊçÆ‰∏ÄËá¥ÊÄßÈ™åËØÅÂ§±Ë¥•: {e}")
        import traceback
        traceback.print_exc()
    
    # ÊÄªÁªì
    print("\n" + "=" * 60)
    print("üéØ Ë∞ÉËØïÊµãËØïÂÆåÊàê!")
    print("üí° Â¶ÇÈúÄÊµãËØïÁâπÂÆöÂäüËÉΩÔºåÂèØ‰ª•‰øÆÊîπmainÂáΩÊï∞‰∏≠ÁöÑÊµãËØïÂèÇÊï∞")
    print("üìù Âª∫ËÆÆÂú®Áîü‰∫ßÁéØÂ¢É‰∏≠ÁßªÈô§Ë∞ÉËØïËæìÂá∫ËØ≠Âè•")


if __name__ == '__main__':
    """
    ËÑöÊú¨Áõ¥Êé•ËøêË°åÊó∂ÁöÑÂÖ•Âè£ÁÇπ
    
    ‰ΩøÁî®ÊñπÊ≥ïÔºö
    1. Á°Æ‰øùÊï∞ÊçÆÂ∫ìËøûÊé•ÈÖçÁΩÆÊ≠£Á°Æ (db_config.py)
    2. Âú®ÂëΩ‰ª§Ë°å‰∏≠ËøêË°å: python get_map_data.py
    3. Êü•ÁúãÂáΩÊï∞ÊµãËØïÁªìÊûúÂíåÊï∞ÊçÆÈ™åËØÅÊä•Âëä
    """
    main()