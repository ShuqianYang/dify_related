# get_map_data.py
import pymysql
from db_config import get_db_config, get_table_name

def get_map_data(animal_type=None, start_date=None, end_date=None):
    """
    Ëé∑ÂèñÂú∞ÂõæÊï∞ÊçÆ - Âä®Áâ©ÂàÜÂ∏ÉÁõëÊµãÁÇπÔºàÂü∫‰∫éÁªèÁ∫¨Â∫¶ÂùêÊ†áÔºâ
    
    Args:
        animal_type (str, optional): Âä®Áâ©ÁßçÁ±ªÁ≠õÈÄâ
        start_date (str, optional): ÂºÄÂßãÊó•Êúü (YYYY-MM-DD)
        end_date (str, optional): ÁªìÊùüÊó•Êúü (YYYY-MM-DD)
    
    Returns:
        list: ÂåÖÂê´Âú∞ÁêÜ‰ΩçÁΩÆÂíåÂä®Áâ©Êï∞ÈáèÁöÑÊï∞ÊçÆÂàóË°®
    """
    try:
        # ËøûÊé•Êï∞ÊçÆÂ∫ì
        connection = pymysql.connect(**get_db_config())
        cursor = connection.cursor()
        
        # ÊûÑÂª∫SQLÊü•ËØ¢ - Áõ¥Êé•‰ΩøÁî®ÁªèÁ∫¨Â∫¶ÂùêÊ†á
        table_name = get_table_name()
        base_sql = f"""
        SELECT 
            longitude,
            latitude,
            location,
            SUM(count) as count,
            GROUP_CONCAT(DISTINCT animal) as animal_types
        FROM {table_name}
        WHERE longitude IS NOT NULL 
        AND latitude IS NOT NULL 
        AND longitude != '' 
        AND latitude != ''
        """
        
        params = []
        
        # Ê∑ªÂä†Á≠õÈÄâÊù°‰ª∂
        if animal_type and animal_type != 'all':
            base_sql += " AND animal = %s"
            params.append(animal_type)
            
        # ‰ΩøÁî®dateÂ≠óÊÆµËøõË°åÊó•ÊúüÁ≠õÈÄâ
        # Ê≥®ÊÑèÔºöÊï∞ÊçÆÂ∫ì‰∏≠dateÂ≠óÊÆµÊ†ºÂºè‰∏∫YYYYMMDDÔºåÂâçÁ´Ø‰º†ÈÄíÁöÑÊòØYYYY-MM-DD
        if start_date:
            # Â∞ÜYYYY-MM-DDÊ†ºÂºèËΩ¨Êç¢‰∏∫YYYYMMDDÊ†ºÂºè
            start_date_formatted = start_date.replace('-', '')
            base_sql += " AND date >= %s"
            params.append(start_date_formatted)
            
        if end_date:
            # Â∞ÜYYYY-MM-DDÊ†ºÂºèËΩ¨Êç¢‰∏∫YYYYMMDDÊ†ºÂºè
            end_date_formatted = end_date.replace('-', '')
            base_sql += " AND date <= %s"
            params.append(end_date_formatted)
        
        base_sql += " GROUP BY longitude, latitude, location ORDER BY count DESC"
        
        # ÂèØÈÄâÔºöËé∑ÂèñÊï∞ÊçÆÂ∫ì‰∏≠ÁöÑÊó•ÊúüËåÉÂõ¥ÔºàÁî®‰∫éË∞ÉËØïÔºâ
        # date_range_sql = f"SELECT MIN(date) as min_date, MAX(date) as max_date, COUNT(*) as total FROM {table_name}"
        # cursor.execute(date_range_sql)
        # date_range = cursor.fetchone()
        # print(f"üìÖ Êï∞ÊçÆÂ∫ìÊó•ÊúüËåÉÂõ¥: {date_range[0]} Âà∞ {date_range[1]}, ÊÄªËÆ∞ÂΩïÊï∞: {date_range[2]}")
        
        # ÊâßË°åÊü•ËØ¢
        cursor.execute(base_sql, params)
        results = cursor.fetchall()
        
        # Â§ÑÁêÜÁªìÊûú
        map_data = []
        for row in results:
            longitude, latitude, location, count, animal_types = row
            try:
                # Â§ÑÁêÜÂ∏¶ÊúâÊñπÂêëÂâçÁºÄÁöÑÁªèÁ∫¨Â∫¶Êï∞ÊçÆ
                # ÁªèÂ∫¶: E/WÂâçÁºÄÔºåÁ∫¨Â∫¶: N/SÂâçÁºÄ
                lng_str = str(longitude).strip()
                lat_str = str(latitude).strip()
                
                # Ëß£ÊûêÁªèÂ∫¶
                if lng_str.startswith('E'):
                    lng = float(lng_str[1:])  # ‰∏úÁªè‰∏∫Ê≠£
                elif lng_str.startswith('W'):
                    lng = -float(lng_str[1:])  # Ë•øÁªè‰∏∫Ë¥ü
                else:
                    lng = float(lng_str)  # Áõ¥Êé•Êï∞Â≠ó
                
                # Ëß£ÊûêÁ∫¨Â∫¶
                if lat_str.startswith('N'):
                    lat = float(lat_str[1:])  # ÂåóÁ∫¨‰∏∫Ê≠£
                elif lat_str.startswith('S'):
                    lat = -float(lat_str[1:])  # ÂçóÁ∫¨‰∏∫Ë¥ü
                else:
                    lat = float(lat_str)  # Áõ¥Êé•Êï∞Â≠ó
                
                map_data.append({
                    'name': location or f"‰ΩçÁΩÆ({lng:.4f},{lat:.4f})",
                    'value': count,
                    'animal_types': animal_types.split(',') if animal_types else [],
                    'coord': [lng, lat]  # Áõ¥Êé•‰ΩøÁî®Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÁªèÁ∫¨Â∫¶
                })
            except (ValueError, TypeError) as e:
                # Ë∑≥ËøáÊó†ÊïàÁöÑÂùêÊ†áÊï∞ÊçÆ
                print(f"ÂùêÊ†áËΩ¨Êç¢Â§±Ë¥•: {e}, ÂéüÂßãÊï∞ÊçÆ: ÁªèÂ∫¶='{longitude}', Á∫¨Â∫¶='{latitude}'")
                continue
        
        cursor.close()
        connection.close()
        
        return map_data
        
    except Exception as e:
        print(f"Ëé∑ÂèñÂú∞ÂõæÊï∞ÊçÆÊó∂Âá∫Èîô: {e}")
        return []



def get_location_detail(longitude=None, latitude=None, location=None, start_date=None, end_date=None, limit=100):
    """
    Ëé∑ÂèñÊåáÂÆöÂùêÊ†áÊàñÂú∞ÁÇπÁöÑËØ¶ÁªÜ‰ø°ÊÅØÔºåÂåÖÊã¨ÊúÄÊñ∞ÂõæÁâá
    
    Args:
        longitude (float, optional): ÁªèÂ∫¶ÂùêÊ†á
        latitude (float, optional): Á∫¨Â∫¶ÂùêÊ†á  
        location (str, optional): Âú∞ÁÇπÂêçÁß∞ÔºàÂ§áÁî®Ôºâ
        start_date (str, optional): ÂºÄÂßãÊó•Êúü (YYYY-MM-DD)
        end_date (str, optional): ÁªìÊùüÊó•Êúü (YYYY-MM-DD)
        limit (int): ËøîÂõûËÆ∞ÂΩïÊï∞ÈáèÈôêÂà∂
    
    Returns:
        list: ÂåÖÂê´ÂõæÁâáÂíåËØ¶ÁªÜ‰ø°ÊÅØÁöÑÊï∞ÊçÆÂàóË°®
    """
    try:
        # ËøûÊé•Êï∞ÊçÆÂ∫ì
        connection = pymysql.connect(**get_db_config())
        cursor = connection.cursor()
        
        table_name = get_table_name()
        
        # Ë∞ÉËØïÔºöÊü•ÁúãÊï∞ÊçÆÂ∫ì‰∏≠ÁöÑÁªèÁ∫¨Â∫¶Ê†ºÂºè
        debug_sql = f"SELECT longitude, latitude, location FROM {table_name} LIMIT 5"
        cursor.execute(debug_sql)
        debug_results = cursor.fetchall()
        print(f"üîç Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÁªèÁ∫¨Â∫¶Ê†ºÂºèÁ§∫‰æã: {debug_results}")
        
        # ÊûÑÂª∫Âü∫Á°ÄSQLÊü•ËØ¢
        base_sql = f"""
        SELECT 
            animal,
            caption,
            time,
            location,
            longitude,
            latitude,
            image_id,
            count
        FROM {table_name}
        WHERE 1=1
        """
        
        params = []
        
        # Ê∑ªÂä†‰ΩçÁΩÆÁ≠õÈÄâÊù°‰ª∂
        if longitude is not None and latitude is not None:
            # ‰ΩøÁî®Ê®°Á≥äÂåπÈÖçÔºåÂÖÅËÆ∏Â∞èÊï∞ÁÇπÂêé2‰ΩçÁöÑËØØÂ∑Æ
            base_sql += " AND ABS(CAST(REPLACE(REPLACE(longitude, 'E', ''), 'W', '') AS DECIMAL(10,6)) - %s) < 0.01"
            base_sql += " AND ABS(CAST(REPLACE(REPLACE(latitude, 'N', ''), 'S', '') AS DECIMAL(10,6)) - %s) < 0.01"
            params.extend([longitude, latitude])
        elif location:
            base_sql += " AND location LIKE %s"
            params.append(f"%{location}%")
        else:
            return []
        
        # Ê∑ªÂä†Êó∂Èó¥ÊÆµÁ≠õÈÄâÊù°‰ª∂
        if start_date:
            # Â∞ÜYYYY-MM-DDÊ†ºÂºèËΩ¨Êç¢‰∏∫YYYYMMDDÊ†ºÂºè
            start_date_formatted = start_date.replace('-', '')
            base_sql += " AND date >= %s"
            params.append(start_date_formatted)
            
        if end_date:
            # Â∞ÜYYYY-MM-DDÊ†ºÂºèËΩ¨Êç¢‰∏∫YYYYMMDDÊ†ºÂºè
            end_date_formatted = end_date.replace('-', '')
            base_sql += " AND date <= %s"
            params.append(end_date_formatted)
        
        base_sql += " ORDER BY time DESC LIMIT %s"
        params.append(limit)
        
        cursor.execute(base_sql, params)
        
        results = cursor.fetchall()
        
        # Â§ÑÁêÜÁªìÊûú
        detail_data = []
        for row in results:
            animal, caption, time, location, lng, lat, image_id, count = row
            detail_data.append({
                'animal_type': animal,
                'caption': caption,
                'time': str(time),
                'location': location,
                'longitude': lng,
                'latitude': lat,
                'coordinates': f"({lng}, {lat})" if lng and lat else None,
                'image_path': f'/static/images/{image_id}.jpg' if image_id else None,
                'count': count
            })
        
        cursor.close()
        connection.close()
        
        return detail_data
        
    except Exception as e:
        print(f"Ëé∑ÂèñÂú∞ÁÇπËØ¶ÊÉÖÊó∂Âá∫Èîô: {e}")
        return []